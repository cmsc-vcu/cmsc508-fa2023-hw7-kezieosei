---
title: Homework 7 - Creating a resume database
author: Kezie Osei
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---



GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-kezieosei>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

* Skills: Storing unique IDs, names, descriptions, URLs for skill-related resources, and time commitments.

* People: Holding employee details such as IDs, names, contact information (email, LinkedIn), headshots, Discord handles, brief bios, and join dates.

* PeopleSkills: Linking skills to employees with acquisition dates and anticipated skill acquisition dates.
Roles: Defining various roles within the company, each with an ID, name, and sort priority.

* PeopleRoles: Associating employees with roles, tracking the date of role assignments.

This structure allows for efficient tracking, mapping, and utilization of employee skills and roles within the organization, facilitating targeted skill assessments, identifying skill gaps, and informing strategic decisions. The database, with its interlinked tables, provides a robust framework for generating reports and insights crucial for enhancing the company's operational efficiency and growth.

## Crows-foot diagram

```{mermaid}
%%| echo: false
erDiagram
    People }o--o{ Skills : have
    People }|--o{ Roles : in
    People{
        int people_id
        string people_first_name
        string people_last_name
        string people_email
        string people_linkedin_url
        string people_headshot_url
        string people_discord_handle
        string people_brief_bio
        date people_date_joined
    }
    Skills {
        int skill_id
        string skill_name
        string skill_description
        string skill_tag
        string skill_url
        int skill_timecommit
    }
    Roles{
        int id
        string rname
        int sort_priority
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT
    skill_name,
    skill_tag,
    skill_description
FROM
    skills
ORDER BY 
    skill_name;
"""
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
import pandas as pd
sql = f"""
SELECT * from roles;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name


```{python}
sql = f"""
SELECT
    skill_name,
    skill_tag,
    skill_description
FROM
    skills
ORDER BY
    skill_name
;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT
    people_first_name,
    people_last_name,
    people_email
FROM
    people
ORDER BY
    CAST(people_last_name AS SIGNED)
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List skill names of Person 1

```{python}
sql = f"""
SELECT
    people_last_name,
    skill_name,
    skill_tag
FROM   
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skill_id=c.skill_id)
WHERE   
    people_last_name = 'Person 1'
ORDER BY
    skill_name,
    people_last_name
;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people names with Skill 6

```{python}
sql = f"""
SELECT
    people_first_name,
    people_last_name,
    skill_name,
    skill_tag
from   
    peopleskills a
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skill_id=c.skill_id)
WHERE   
    c.skill_id = 6
;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT
    c.people_first_name,
    c.people_last_name,
    c.people_id
FROM   
    peopleroles a
    INNER JOIN roles b ON a.roles_id = b.roles_id
    INNER JOIN people c ON a.people_id = c.people_id
WHERE   
    b.roles_id = 2;

"""
```

### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT
    people_first_name,
    people_last_name,
    email
FROM   
    people b
    LEFT JOIN peopleskills a ON (b.people_id = a.people_id)
WHERE   
    a.people_id IS NULL;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
```{python}
sql = f"""
SELECT
    skill_name,
    skill_tag
FROM   
    skills a
    LEFT JOIN peopleskills b ON (a.skill_id = b.skill_id)
WHERE   
    b.skill_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role
```{python}
sql = f"""
SELECT
    a.people_first_name,
    a.people_last_name,
    d.skill_name
FROM   
    people a
    INNER JOIN peopleroles b ON a.people_id = b.people_id
    INNER JOIN roles c ON b.id = c.id
    INNER JOIN peopleskills e ON a.people_id = e.people_id
    INNER JOIN skills d ON e.skill_id = d.skill_id
WHERE   
    c.name = 'Boss';


"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles
```{python}
sql = f"""
SELECT
    a.id,
    name
FROM   
    roles a
    LEFT JOIN peopleroles b ON (a.id = b.id)
WHERE   
    b.id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

Working on this assignment provided a comprehensive understanding of database schema design, SQL queries, and their practical applications in managing organizational data. The tasks required querying the database to extract specific information, showcasing the importance of accurate data modeling and efficient data retrieval methods. This assignment very integral the completion of the semester project. 



